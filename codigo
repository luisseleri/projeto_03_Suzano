#BOOTCAMP SUZANO - DESAFIO - SISTEMA BANCARIO V2
import textwrap

def exibir_menu():
    menu = """\n
    ================= MENU =================
    [d]\tDepositar dinheiro
    [s]\tRealizar saque
    [e]\tVer extrato bancário
    [nu]\tRegistrar novo cliente
    [nc]\tCriar nova conta corrente
    [lc]\tListar contas cadastradas
    [q]\tEncerrar sistema
    => """
    return input(textwrap.dedent(menu))


def realizar_deposito(saldo_atual, valor_deposito, historico_depositos):
    if valor_deposito > 0:
        saldo_atual += valor_deposito
        historico_depositos += f"Depósito:\tR$ {valor_deposito:.2f}\n"
        print("\n=== Depósito efetuado com sucesso! ===")
    else:
        print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
    return saldo_atual, historico_depositos


def realizar_saque(*, saldo_atual, valor_saque, historico_saques, limite_saque, quantidade_saques, limite_quantidade_saques):
    excedeu_saldo = valor_saque > saldo_atual
    excedeu_limite = valor_saque > limite_saque
    excedeu_quantidade_saques = quantidade_saques >= limite_quantidade_saques

    if excedeu_saldo:
        print("\n@@@ Operação falhou! Saldo insuficiente. @@@")
    elif excedeu_limite:
        print("\n@@@ Operação falhou! O valor ultrapassa o limite permitido. @@@")
    elif excedeu_quantidade_saques:
        print("\n@@@ Operação falhou! Limite de saques diários atingido. @@@")
    elif valor_saque > 0:
        saldo_atual -= valor_saque
        historico_saques += f"Saque:\t\tR$ {valor_saque:.2f}\n"
        quantidade_saques += 1
        print("\n=== Saque realizado com sucesso! ===")
    else:
        print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
    return saldo_atual, historico_saques


def mostrar_extrato(saldo_atual, *, historico_saques):
    print("\n================ EXTRATO BANCÁRIO ================")
    print("Nenhuma movimentação registrada." if not historico_saques else historico_saques)
    print(f"\nSaldo atual:\tR$ {saldo_atual:.2f}")
    print("==========================================")


def registrar_cliente(lista_clientes):
    cpf_cliente = input("Informe o CPF (somente números): ")
    cliente_existente = buscar_cliente_por_cpf(cpf_cliente, lista_clientes)

    if cliente_existente:
        print("\n@@@ Cliente já cadastrado com este CPF! @@@")
        return

    nome_cliente = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco_cliente = input("Informe o endereço (logradouro, número - bairro - cidade/sigla estado): ")

    lista_clientes.append({
        "nome": nome_cliente,
        "data_nascimento": data_nascimento,
        "cpf": cpf_cliente,
        "endereco": endereco_cliente
    })

    print("=== Cliente registrado com sucesso! ===")


def buscar_cliente_por_cpf(cpf, lista_clientes):
    clientes_filtrados = [cliente for cliente in lista_clientes if cliente["cpf"] == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None


def criar_conta_corrente(agencia_bancaria, numero_conta, lista_clientes):
    cpf_cliente = input("Informe o CPF do cliente: ")
    cliente = buscar_cliente_por_cpf(cpf_cliente, lista_clientes)

    if cliente:
        print("\n=== Conta corrente criada com sucesso! ===")
        return {"agencia": agencia_bancaria, "numero_conta": numero_conta, "cliente": cliente}

    print("\n@@@ Cliente não encontrado, criação de conta encerrada! @@@")


def listar_contas_cadastradas(contas):
    for conta in contas:
        linha = f"""\
            Agência:\t{conta['agencia']}
            Conta Corrente:\t{conta['numero_conta']}
            Titular:\t{conta['cliente']['nome']}
        """
        print("=" * 100)
        print(textwrap.dedent(linha))


def iniciar_sistema():
    LIMITE_SAQUES_DIARIOS = 3
    AGENCIA_PADRAO = "0001"

    saldo_atual = 0
    limite_saque = 500
    historico_transacoes = ""
    quantidade_saques = 0
    lista_clientes = []
    contas_bancarias = []

    while True:
        opcao_escolhida = exibir_menu()

        if opcao_escolhida == "d":
            valor_deposito = float(input("Informe o valor para depósito: "))
            saldo_atual, historico_transacoes = realizar_deposito(saldo_atual, valor_deposito, historico_transacoes)

        elif opcao_escolhida == "s":
            valor_saque = float(input("Informe o valor para saque: "))
            saldo_atual, historico_transacoes = realizar_saque(
                saldo_atual=saldo_atual,
                valor_saque=valor_saque,
                historico_saques=historico_transacoes,
                limite_saque=limite_saque,
                quantidade_saques=quantidade_saques,
                limite_quantidade_saques=LIMITE_SAQUES_DIARIOS
            )

        elif opcao_escolhida == "e":
            mostrar_extrato(saldo_atual, historico_saques=historico_transacoes)

        elif opcao_escolhida == "nu":
            registrar_cliente(lista_clientes)

        elif opcao_escolhida == "nc":
            numero_conta = len(contas_bancarias) + 1
            conta = criar_conta_corrente(AGENCIA_PADRAO, numero_conta, lista_clientes)

            if conta:
                contas_bancarias.append(conta)

        elif opcao_escolhida == "lc":
            listar_contas_cadastradas(contas_bancarias)

        elif opcao_escolhida == "q":
            print("\n=== Sistema encerrado. Até logo! ===")
            break

        else:
            print("\n@@@ Opção inválida! Por favor, escolha uma operação válida. @@@")


iniciar_sistema()
